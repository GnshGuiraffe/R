---
title: '<center><img src= ''img/logo_sesc.jpg'' width = ''30%'' alt=''SESC Logo''></br></center> '
author: "10/08/2022"
subtitle: Programação em R  <BR> para Análise de Dados <BR> Uma Introdução
output:
  xaringan::moon_reader:
    lib_dir: libs
    chakra: libs/remark-latest.min.js
    css:
    - default
    - css/metropolis.css
    - css/metropolis-fonts.css
    - css/footer.css
    includes:
      after_body: html/insert-logo.html
    nature:
      highlightStyle: github
      highlightLines: yes
      countIncrementalSlides: no
  slidy_presentation: default
encoding: UTF-8
---
layout: true
  
<div class="my-footer"><span>


<a href="https://www.linkedin.com/in/hsvab/">LinkdIn</a> |
<a href="https://twitter.com/hsvab">Twitter</a> | 
<a href="https://www.instagram.com/haydeesvab/">Instagram</a> |
<a href="https://www.facebook.com/haydee.svab/">Facebook</a> |
<a href="https://github.com/hsvab">GitHub</a>


</span></div> 

---
class:    

# Apresentações 

- asdasd

- asdasd

- asdasds

- E vcs? 

---
class:

# Programação do Curso

- Aula 1: Introdução ao R e ao RStudio

- Aula 2: Primeiros passos com R e o pacote tidyverse

- Aula 3: Abrindo e manipulando dados

- Aula 4: Estatísticas básicas

- Aula 5: Visualizando dados

- Aula 6: Markdown

- Aula 7: Comunicando resultados


---
class:    

# Agenda de hoje

- Apresentações

- Programação

- Acessando a RStudio Cloud

- Algoritmos

- Programação

- Linguagem R - uma visão geral

- Conhecendo o RStudio

+

---
class: center

```{r setup, include=FALSE}
options(htmltools.dir.version = FALSE)

knitr::opts_chunk$set(fig.align = "center", message=FALSE, warning=FALSE)

library(tidyverse)

```

# RStudio Cloud

### - Criar conta na `RStudio` Cloud


```{r, echo=FALSE, out.width="40%"}
knitr::include_graphics("img/rstudiocloud.PNG")
```
Link: [https://rstudio.cloud/](https://rstudio.cloud/)

### - Acessar link do projeto

Link: [https://bit.ly/rstudiocloud-curso-sesc](https://bit.ly/rstudiocloud-curso-sesc)

### - Fazer uma cópia do projeto



---
class: center

# RStudio Cloud

### Exemplo de como acessar o projeto (GIF)

```{r, echo=FALSE, out.width="100%"}
knitr::include_graphics("img/gif-rstudiocloud.gif")
```


Importante: Quando aparecer na sua tela, clique em **"Save a permanent copy"**

---
class:    

# O que é um algoritmo?

Um algoritmo é uma sequência finita de instruções.

--

O primeiro algoritmo foi desenvolvido no século XIX pela matemática e escritora inglesa Ada Lovelace.
 
```{r echo=FALSE, fig.align='center', out.width="40%"}
knitr::include_graphics("img/ada_lovelace.jpeg")
``` 

---
class:    


# O que é um algoritmo?

**Exemplo**

* Receita de bolo

```{r echo=FALSE, fig.align='center', out.width="90%"}
knitr::include_graphics("img/receita-bolo.jpg")
```

---
class:    

# O que é um algoritmo?

**Exemplo**

* [Como construir uma estante de livros](https://pt.wikihow.com/Construir-uma-Estante-de-Livros)

```{r echo=FALSE, fig.align='center', out.width="70%"}
knitr::include_graphics("img/estante.jpg")
```

---
class:    

# O que é um algoritmo?

**Exemplo**

* [Como fazer um drone caseiro com arduino](https://www.palpitedigital.com/como-fazer-drone-caseiro-arduino/)

```{r echo=FALSE, fig.align='center', out.width="50%"}
knitr::include_graphics("img/drone-arduino-e1469058606329-600.webp")
```


---
class:    

# O que é um algoritmo?

**Sua vez...**

* Saindo de casa, pego o celular, abro um app e quero saber como chegar no SESC Paulista o mais breve possível. Poderia descrever qual(is) algoritmo(s) usamos?

```{r echo=FALSE, fig.align='center', out.width="70%"}
knitr::include_graphics("img/rota.jpg")
```

---
class:    


# O que é programar? 

Programar um computador é escrever instruções em qualquer **linguagem** que o computador entenda.

--

Essa sequência de instruções pode ser executada por um humano ou por um computador.

--

Então, **programação é a arte de fazer com que o computador execute uma sequência de instruções definidas.**

--

```{r}
print('Ola!')

```

---
class:    

# O que é o R?
> "R é um ambiente de software livre para computação estatística e gráficos". (https://www.r-project.org/)

- **R** é um ambiente computacional e uma linguagem de programação que vem progressivamente se especializando em manipulação, análise e visualização gráfica de dados.


- Atualmente, é considerado um dos melhores ambientes computacionais para essa finalidade.


---
class:    

# O que é o R?

* O ambiente está disponível para diferentes sistemas operacionais: Unix/Linux, Mac e Windows. 

* Baseado na linguagem estatística S   

* 1ª versão de 1995 por Ross Ihaka e Robert Gentleman da Universidade de Auckland

```{r echo=FALSE, out.width="20%"}
knitr::include_graphics("img/Rlogo.png")
```

---
class:    


# O que é o R?
* Berço na Estatística

* Muito usado por cientistas de dados, estatísticos e pesquisadores.

* Cada vez mais usado por jornalistas.

* Mantida pela [R Development Core Team](https://cran.r-project.org/) 

* Pode ser usada para diversos fins.

---
class:    

# Por que usar o R?

- É uma linguagem de programação para análise de dados

- É open source

- É uma linguagem interpretada

- Possui uma comunidade ativa de desenvolvedores

- É flexível, permitindo desenvolver funções e pacotes para facilitar o trabalho 

- Está disponível em diferentes plataformas: Windows, Linux e Mac

- É reprodutível!

- É compartilhável!


---
class:    

# O que é possível fazer com R?

* Análise de dados - Estatística, modelagem, etc.

* Visualização de dados

* Apresentações 

* Relatórios dinâmicos

* Escrever livros 

* Mineração de dados

* Muito mais ...


---
class:    


# Exemplo
**Gráfico elaborado com `R` - Material Particulado 10 - Dados CETESB - RPollution** 

```{r echo=FALSE, out.width="70%"}
knitr::include_graphics("img/PMSP-chunk-6-1.png") 
```
Fonte: [Rpollution](https://www.rpollution.com/)

---
class:    

# Exemplo

**Frequência de Palavras - TESE Doutorado PROCAM/USP Ana Lucia Spinola** 

```{r echo=FALSE, out.width="70%"}
knitr::include_graphics("img/ana-lu-freq.png") 
```
Fonte: [Ana Lu Spinola](https://analuspi.github.io/Text-Mining/)
---
class:    


# Exemplo
**BIGRAM - TESE Doutorado PROCAM/USP Ana Lucia Spinola** 

```{r echo=FALSE, out.width="70%"}
knitr::include_graphics("img/bigram-ana-lu.png") 
```
Fonte: [Ana Lu Spinola](https://analuspi.github.io/Text-Mining/)

---
class: center, middle

## Introdução ao RStudio

---
class:    


# RStudio

**RStudio** é o IDE (integrated development environment) da Linguagem R, ou seja, o ambiente que utilizamos para editar e executar os códigos em R. Tem quatro áreas, conforme a figura abaixo:

```{r echo=FALSE, out.width="80%"}
knitr::include_graphics("img/RStudio_screen.png")
```
Fonte: [Curso Introdução ao `R` - Fatec](https://github.com/MaryMS/2018-11-R-Course-FatecZS)

---
class:    


# RStudio
```{r echo=FALSE, out.width="100%"}
knitr::include_graphics("img/01-rstudio.png")
```
Fonte: [SW Carpentry](http://swcarpentry.github.io/r-novice-gapminder/01-rstudio-intro/index.html)

---
class:    


# RStudio
```{r echo=FALSE, out.width="100%"}
knitr::include_graphics("img/01-rstudio-script.png")
```
Fonte: [SW Carpentry](http://swcarpentry.github.io/r-novice-gapminder/01-rstudio-intro/index.html)


---
class:    


# RStudio
```{r echo=FALSE, out.width="100%"}
knitr::include_graphics("img/haydee1.jpg")
```
Fonte: [Haydee Svab](https://www.slideshare.net/mobile/haydeesvab/anlise-crtica-de-dados-primeiros-passos-com-r)

---
class:    


# RStudio
```{r echo=FALSE, out.width="100%"}
knitr::include_graphics("img/haydee2.jpg")
```
Fonte: [Haydee Svab](https://www.slideshare.net/mobile/haydeesvab/anlise-crtica-de-dados-primeiros-passos-com-r)

---
class:    


# RStudio
```{r echo=FALSE, out.width="100%"}
knitr::include_graphics("img/haydee3.jpg")
```
Fonte: [Haydee Svab](https://www.slideshare.net/mobile/haydeesvab/anlise-crtica-de-dados-primeiros-passos-com-r)

---
class:    


# RStudio
```{r echo=FALSE, out.width="100%"}
knitr::include_graphics("img/haydee4.jpg")
```
Fonte: [Haydee Svab](https://www.slideshare.net/mobile/haydeesvab/anlise-crtica-de-dados-primeiros-passos-com-r)

---
class:    


# RStudio
```{r echo=FALSE, out.width="100%"}
knitr::include_graphics("img/haydee5.jpg")
```
Fonte: [Haydee Svab](https://www.slideshare.net/mobile/haydeesvab/anlise-crtica-de-dados-primeiros-passos-com-r)

---
class:    

# RStudio
```{r echo=FALSE, out.width="100%"}
knitr::include_graphics("img/haydee6.jpg")
```
Fonte: [Haydee Svab](https://www.slideshare.net/mobile/haydeesvab/anlise-crtica-de-dados-primeiros-passos-com-r)

---
class:    


# RStudio
```{r echo=FALSE, out.width="100%"}
knitr::include_graphics("img/haydee7.jpg")
```
Fonte: [Haydee Svab](https://www.slideshare.net/mobile/haydeesvab/anlise-crtica-de-dados-primeiros-passos-com-r)

---
class:    

# RStudio
  


```{r echo=FALSE, out.width="100%"}
knitr::include_graphics("img/haydee8.jpg")
```
Fonte: [Haydee Svab](https://www.slideshare.net/mobile/haydeesvab/anlise-crtica-de-dados-primeiros-passos-com-r)


---
class:    


# Help!

- Pedir ajuda: **help**(nome_da_funcao) ou **?**nome_da_funcao.

```{r, eval=FALSE}
help(sum)
?sum
```

- Se a dúvida permanecer, procure no [Stack OverFlow](https://stackoverflow.com/) ou Google.
- E se ainda tiver dúvidas, pergunte para a comunidade (há grupos no Telegram e outras redes sociais).

---
class: center, middle

## Boas práticas iniciais para organizar seu projeto


Fonte: [SW Carpentry](http://swcarpentry.github.io/r-novice-gapminder/02-project-intro/index.html)

---
class: 

# Boas práticas 

- **Tratar dados como somente leitura:** 

- Esse é provavelmente o objetivo mais importante da configuração de um projeto. 
- Os dados geralmente consomem tempo e/ou são caros para coletar. 

- Trabalhar com eles interativamente (por exemplo, no Excel), onde eles podem ser modificados, significa que você nunca tem certeza de onde os dados vieram, ou como eles foram modificados desde a coleta. 

- Portanto, é uma boa ideia tratar seus dados como “somente leitura”.

- Nunca sobrescrever os seus dados originais! Isso vale para a base e para variáveis.

- Ex: ter uma pasta "data_raw" (dados brutos), e "data" (dados já tratados). 

- Exemplo dos dados de orçamento da prefeitura: com código, fazer download dos dados brutos em uma pasta "data_raw". Tratar os dados, e a base "limpa" deve ser exportada para a pasta "data". Tudo isso deve ser realizado através de código! 


---
class: 

# Boas práticas 

- **Qualquer coisa gerada pelos seus scripts deve ser tratada como descartável:** 


- Não salvar o workspace ao fechar!

- Ideal é que todos os seus resultados sejam possíveis de ser reproduzidos através do script. 



---
class: 

# Boas práticas 

- **Os nomes das suas variáveis devem fazer sentido:** Ao nomear suas variáveis, dê nomes que tenham significado para seres humanos. Pense que o código que você escreve hoje deve ser claro para você daqui 1 ano e também deve ser claro para algum(a) colega seu(ua).



- **Exemplo positivo**:

```{r include=TRUE, eval = FALSE }
lista_de_mercado <- c("chocolate", "pao", "café")

```


- **Exemplo negativo**:

```{r include=TRUE, eval = FALSE }
lista <- c("chocolate", "pao", "café")
```

---
class: 

# Boas práticas 

- **Comente bem o seu código:** É possível fazer comentários usando o símbolo '#'. É sempre bom explicar o que uma variável armazena, o que uma função faz, porque alguns parâmetros são passados para uma determinada função, qual é o objetivo de um trecho de código, etc.

```{r eval=FALSE, include=TRUE}
# Esse é um exemplo. O # é útil para escrever um comentário!

help(sum) # a função help é útil para pesquisar a documentação 
```

- Atalho útil para comentário: `Ctrl + Shift + C`

```{r, echo=FALSE, out.width="100%"}
knitr::include_graphics("img/gif-atalho-comentario.gif")
```


---
class: 

# Boas práticas

- **Evite linhas de código muito longas:** Usar linhas de código mais curtas ajuda na leitura do código.

- **Exemplo positivo**:  fica mais fácil de ler!
```{r include=FALSE}
df_titanic <- read_csv("data/titanic.csv")
```

```{r eval=FALSE, include=TRUE}
df_titanic  %>%
  filter(sexo == "masculino" & sobreviveu == "sim") %>%
  arrange(classe)
```

- **Exemplo para evitar:**  fica mais difícil de ler
```{r eval=FALSE, include=TRUE}
df_titanic  %>%   filter(sexo == "masculino" & sobreviveu == "sim") %>%   arrange(classe)
```

- Atalho útil para identação: `Ctrl + Shift + A`

```{r, echo=FALSE, out.width="100%"}
knitr::include_graphics("img/gif-atalho-identacao.gif")
```

Fonte: [SW Carpentry](http://swcarpentry.github.io/r-novice-gapminder/02-project-intro/index.html)

---
class: 

# Boas práticas 

- **Escreva um código organizado:** Por exemplo, adote um padrão no uso de minúsculas e maiúsculas, uma lógica única na organização de pastas e arquivos, pode ser adotada uma breve descrição (como comentário) indicando o que um determinado script faz.

- Exemplo: use snake_case (palavras em minúsculas, separados por um underscore) em todas as variáveis e funções do seu projeto.

- Dica útil: função `clean_names()` do pacote `janitor`.


```{r}
names(iris)
iris_clean <- janitor::clean_names(iris)
names(iris_clean)
```




---
class: 

# Boas práticas 
- **Carregue todos os pacotes que irá usar sempre no início do arquivo:** Quando alguém abrir o seu código será fácil identificar quais são os pacotes que devem ser instalados e quais dependências podem existir.

- Exemplo:

```{r, eval=FALSE, include=TRUE}
# Pacotes utilizados no projeto
library(dplyr) # utilizada para manipulação dos dados
library(ggplot2) # utilizada para criar gráficos bonitos
library(magrittr) # possibilita usar o pipe %>% 
```

---
class: 

# Boas práticas 
- **Evite referência de caminho que considere seu computador ou usuário:** Faça referência ao caminho do projeto.

- **Exemplo positivo**:

```{r include=TRUE, eval = FALSE }
df_titanic <- read_csv("data/titanic.csv")
```


- **Exemplo negativo**:

```{r include=TRUE, eval = FALSE }
df_titanic <- read_csv("C:\Users\beatr\Documents\GitHub\2020-R-Ladies-SP-Basico\data/titanic.csv")
```


---
class:    


# Antes de começar: o projeto

- Ao realizar um projeto, sempre organizar os arquivos em uma **pasta** que conterá todos os arquivos de seu projeto. 

- Nomear novos arquivos com **nomes descritivos**


```{r echo=FALSE, out.width="50%"}
knitr::include_graphics("img/diretorio-projeto.PNG") 
```

---
class:    


# Projetos

- Um bom layout de projeto facilitará sua vida:

- ajudará a garantir a integridade de seus dados;

- facilita o compartilhamento de seu código com outra pessoa (colega de laboratório, colaborador ou /orientador); 

- ele permite que você facilmente faça o upload do seu código com a submissão do seu manuscrito; torna-se mais fácil recuperar o projeto depois de um intervalo. 



---
class:    


# Criando um projeto


- Clique na opção **“File”** do menu, e então em **“New Project”**. ->  Clique em **“New Directory”**. -> Clique em **“New Project”**. -> 1.  Escreva o nome do diretório (pasta) onde deseja manter seu projeto, ex. “my_project”. Clique no botão **“Create Project”**.

- OBS: Crie um novo script para escrever seus códigos!
  **File -> New File -> RScript **
  
  
```{r echo=FALSE, out.width="90%"}
knitr::include_graphics("img/gif-criar-projeto.gif") 
```


---
class:


# Instruções

- Abrir o `RStudio` no seu computador (ou o RStudio Cloud caso esteja sem RStudio instalado)

- Crie um novo projeto para utilizar durante este curso (caso esteja usando o RStudio Cloud, automaticamente já estará utilizando um projeto) 

- Crie um novo `R` script (file -> new file -> `R` script)

---
class:    


# E lá vamos nós!

<center><img src="img/S5e27_T.V._typing.gif"></center> 


---
class:    


# Pacotes no R

**Pacotes** são coleções de funções, dados e documentação que estendem as capacidades do `R` básico.

Eles precisam ser instalados e carregados.

<center><img src="img/icon-packages.jpg" style="width: 45%"></center>

---
class:    


## Instalação de Pacotes:

- Via CRAN: install.packages("nome-do-pacote").

```{r, include=TRUE, eval = FALSE }
install.packages("tidyverse")
```

- Via Github: devtools::install_github("nome-do-repo/nome-do-pacote").

```{r, include=TRUE, eval = FALSE }
devtools::install_github("tidyverse/dplyr")
```


## Carregar pacotes:

- library(nome-do-pacote)

```{r, eval=TRUE, message=FALSE}
library(tidyverse)
```

---
class:    


# Dicas sobre Pacotes

1. Você só precisa instalar o pacote uma vez, mas precisa carregá-lo sempre que começar uma nova sessão;

2. Para instalar o pacote use as aspas;  

3. Para carregar o pacote, **não** utilize as aspas.

---
class:    


# Pacotes - CRAN Task View

Relação de pacotes encontrados no CRAN por áreas de interesse.

- [CRAN Task View](https://cran.r-project.org/web/views/)

```{r echo=FALSE, fig.align='center', out.width="100%"}
knitr::include_graphics("img/cran_task_view.png")
```

---
class: center, middle

## `R` Básico

---
class:    


# `R` como calculadora

- O `R` permite realizar muitas operações aritméticas em seu console!

```{r}
2 + 5    # adição

9 - 4    # subtração

5 * 2    # multiplicação

7 / 5    # divisão
```


- `CTRL + ENTER`: executa a linha selecionada no script.


---
class:    


# `R` como calculadora

```{r}
9 %% 4   # resto da divisão de 9 por 4

7 %/% 4  # parte inteira da divisão de 7 por 4

8 ^ 2    # potenciação

sqrt(1024) # radiciação
```

A ordem matemática das operações também vale no R.

---
class:    


# Funções matemáticas

```{r}
sin(1)  # funções trigonométricas

log(1)  # logaritmo natural (base e)

log10(10) # logaritmo na base 10

exp(0.5) # e^(1/2)

```

Fonte: [SW Carpentry](http://swcarpentry.github.io/r-novice-gapminder/01-rstudio-intro/index.html)

---
class:    


# Desafio 1

Haydée quer contabilizar quantas pessoas participaram dos meetups das RLadies São Paulo em 2019. Ela contabilizou o número de pessoas que participaram em cada evento: 

1. Fevereiro, Outubro e Novembro - 60 pessoas cada
1. Abril e Agosto - 30 pessoas cada
1. Março, Maio e Julho - 20 pessoas cada 
1. Junho, Setembro e Dezembro - 45 pessoas cada  

Quantas pessoas participaram dos meetups das RLadies em 2019? 

---
class:    


# Desafio 1 - Resposta

Haydée quer contabilizar quantas pessoas participaram dos meetups das RLadies São Paulo em 2019. Ela contabilizou o número de pessoas que participaram em cada evento:

1. Fevereiro, Outubro e Novembro - 60 pessoas cada
1. Abril e Agosto - 30 pessoas cada
1. Março, Maio e Julho - 20 pessoas cada 
1. Junho, Setembro e Dezembro - 45 pessoas cada  

Quantas pessoas participaram dos meetups das RLadies em 2019? 

```{r}
3*60 + 2*30 + 3*20 + 3*45
```

---
class:    


# O que é um objeto?
- Ao se desenvolver um projeto, você irá trabalhar com diversos tipos de arquivos, além de informações que serão repetidas ao longo do script.

- Para reutilizar essas informações ao longo do script utilizamos o que chamamos de **objeto**

- Um objeto retém e representa um valor ou expressão

```{r echo=FALSE, fig.align='center', out.width="40%"}
knitr::include_graphics("img/ran.jpg")
```

---
class:    


# Atribuindo valor a um objeto no R

- Para atribuir um valor a um objeto no R, utilizamos o operador **<-**  <br></br>

- O atalho ALT + **-** gera o operador **<-** <br></br>

- Todas as declarações em `R` onde são criados objetos atribuindo-se valores a elas, têm a mesma forma:  

<center><b>nome_do_objeto <- valor<b></center>

- Atalho: `ALT` + `-`: cria o `<-` sinal de atribuição.


---
class:    

# Exemplos 
## Objetos e atribuição de valores

```{r}
nome_empregado <- "Tom Cruise de Souza e Silva"
nome_empregado
horas_trabalhadas <- 160
horas_trabalhadas
```


---
class:    

# Exemplos 
## Objetos e atribuição de valores

```{r}
salario <- 3984.23
salario
ativo <- TRUE
ativo
```
---
class:    


# Nomes de objetos
- Os nomes devem começar com uma letra. Podem conter letras, números, _ e .<br></br>

- Recomendação do autor do livro `R` For Data Science: **usar_snake_case**, ou seja, palavras escritas em minúsculo separadas pelo underscore (_).<br></br>

- O `R` é *case sensitive*, isto é, faz a diferenciação entre as letras minúsculas e maiúsculas. Portanto, um objeto chamado *teste* é diferente de uma outro objeto chamada *Teste*.

---
class:    


# Desafio 2
1) Crie objetos para os casos abaixo:

- Restaurante com valor Rodízio Japonês
- Conta a pagar com valor 40,50
- Dinheiro na carteira com valor 60

2) Quanto receberei de troco, se eu pagar a conta do restaurante com o dinheiro que tenho na carteira? Use os objetos criados anteriormente. 

---
class:    


# Desafio 2 - Resposta
1) Crie objetos para os casos abaixo: 

```{r}
restaurante <- "Rodizio Japones"
restaurante
conta <- 40.50
conta
dinheiro <- 60
dinheiro

```

---
class:    


# Desafio 2 - Resposta
2) Quanto receberei de troco, se eu pagar a conta do restaurante com o dinheiro que tenho na carteira? Use os objetos criados anteriormente. 

```{r}

dinheiro - conta

```

---
class:    


# Classes Básicas ou Atômicas do R

São os tipos básicos de dados que podem ser representados na linguagem R. É neles que guardamos as informações que necessitamos para um algoritmo.

- **Integer**: números inteiros <br></br>
- **Numeric**: números racionais <br></br>
- **Complex**: números complexos (raramente usados para Análise de Dados) <br></br>
- **Logical**: TRUE, FALSE ou NA <br></br>
- **Factor**: variavéis categóricas <br></br>
- **Character**: texto <br></br>

---
class:    


# Exemplos: integer

```{r}
10L # Um número inteiro pode ser representado acompanhado de um L
2019L
```

---
class:    


# Exemplos: numeric

```{r}
10
2019
5.44
```

---
class:    


# Exemplos: complex
```{r}
4 + 9i
```

---
class:    


# Exemplos: logical
```{r}
TRUE
FALSE
```

---
class:    


# Exemplos: factor

```{r}
escolaridade <- c("Médio", "Superior", "Fundamental", "Fundamental", "Médio")
fator <- as.factor(escolaridade)
fator
```

A função as.factor() criou um objeto do tipo factor.

Na linha *Levels* aparecem os rótulos do fator.

Essa classe de dados pode ser trabalhada com o pacote **forcats**.

---
class:    


# Exemplos: character

```{r}
"escola"
"2019"
"I love pinschers."
```

---
class:    


# Operações simples com strings

```{r}
animal <- "Camaleao"
#letras maiúsculas
toupper(animal)
#letras minúsculas
tolower(animal)
#número de caracteres
nchar(animal)
```

---
class:    


# Função class

A função **class** mostra a classe de um objeto.

```{r}
nome_filme <- "Bohemian Rhapsody"
class(nome_filme)
ano_inteiro <- 2018L
class(ano_inteiro)
ano <- 2018
class(ano)
```

---
class:    


# Função class

```{r}
motor <- 1.5
class(motor)
passou_enem <- TRUE
class(passou_enem)
```

---
class:    


# Conversão de classes

Podemos forçar um objeto a ser de uma classe específica com as funções:  
- as.character() <br></br>
- as.numeric() <br></br>
- as.integer() <br></br>
- as.logical() <br></br>

---
class:    


# Conversão de classes
** Exemplos de conversão de classes **

```{r}
vetor <- 0:9
vetor
class(vetor)

vetor_numeric <- as.numeric(vetor)
vetor_numeric
class(vetor_numeric)
```

---
class:    


# Conversão de classes
** Exemplos de conversão de classes **


```{r}
vetor_logical <- as.logical(vetor)
vetor_logical
class(vetor_logical)
```

---
class:    


# Desafio 3

Converta o objeto Conta criado anteriormente para character. Agora cheque sua classe. O que acontece com seu valor? Como explica o que aconteceu?

---
class:    


# Desafio 3 - Resposta

Converta o objeto Conta criado anteriormente para character. Agora cheque sua classe. O que acontece com seu valor? 

```{r}
conta
```

```{r}
as.character(conta)
```

---
class:    


# Desafio 3 - Resposta

Converta o objeto Conta criado anteriormente para character. Agora cheque sua classe. O que acontece com seu valor? 

```{r}
conta
class(conta)
```

```{r}
as.character(conta)
```

```{r}
conta <-  as.character(conta)
```

```{r}
class(conta)
```
---
class:    


# Tipos de objetos

Os tipos dos objetos são definidos a partir dos valores armazenados neles:

- **Vector**: armazena elementos de mesma classe. <br></br>   
- **Matrix**: vetores de duas dimensões que armazenam elementos de mesma classe. <br></br>
- **List**: tipo especial de vetor que aceita elementos de classes diferentes. <br></br>
- **Data.frame**: são tabelas de dados com linhas e colunas, como uma tabela do Excel. Como são listas, essas colunas podem ser de classes diferentes.

---
class:    


# Exemplo: Vector

A função c() cria um vetor.
```{r}
semestre1 <- c("janeiro", "fevereiro", "março", "abril", "maio")
notas_alunos <- c(5, 6.5, 10, 0.5, 2.75)
```

É possível realizar operações com vetores.

```{r}
vetor1 <- 1:5
vetor1 / 5   # objeto vetor1 dividido por 5
```

```{r}
vetor2 <- 6:10
vetor1 * vetor2
```

---
class:    


# Exemplo: Matrix

A função matrix() cria uma matriz.
```{r}
primeira_matriz <- matrix(1:8, nrow = 2, ncol = 4)
primeira_matriz
```

A função dim() retorna a dimensão do objeto (linha e coluna).
```{r}
dim(primeira_matriz)
```

---
class:    


# Exemplo: List

A função list() cria uma lista.
```{r}
wizards <- list("Harry Potter", 18, TRUE, c("Hermione Granger", "Rony Weasley"))
class(wizards)
```

A função is.list() verifica se o objeto é ou não uma lista.

```{r}
harry_friends <- c("Hermione Granger", "Rony Weasley")
class(harry_friends)
is.list(harry_friends)
```

---
class:    


# Exemplo: Data.frame


A função head() mostra as primeiras 6 linhas do dataframe.
```{r}
data(iris)

df <- iris

head(df)
```

---
class:    


# Funções úteis 

##Para trabalhar com dataframes

- `tail()`: mostra as últimas 6 linhas.

- `names()`: mostra os nomes das colunas.

- `View()`: mostra o dataframe.

---
class:    


# Desafio 4

1) Quantas observações tem o data.frame iris?<br></br>
2) Quais são as variáveis do data.frame iris?<br></br>
3) Visualize o dataframe iris.

---
class:    


# Desafio 4 - Resposta

1) Quantas observações tem o data.frame iris?<br></br>
```{r}
tail(df)
```
2) Quais são as variáveis do data.frame iris?

```{r}
names(df)
```
---
class:    


# Desafio 4 - Resposta

3) Visualize o dataframe iris.
```{r eval=FALSE}
View(df)
```

```{r echo=FALSE, fig.align='center', out.width="75%"}
knitr::include_graphics("img/View_iris.png")
```

---
class:


# Operadores Relacionais
- Igual a: **==** <br></br> 
- Diferente de: **!=** <br></br>
- Maior que: **>** <br></br>
- Maior ou igual: **>=** <br></br>
- Menor que: **<** <br></br>
- Menor ou igual: **<=** <br></br>

---
class:    


# Exemplos de Operadores Relacionais

Igual a: **==**
```{r}
TRUE == TRUE

TRUE == FALSE
```
---
class:    


# Exemplos de Operadores Relacionais

Diferente de **!=**
```{r}
TRUE != TRUE

TRUE != FALSE
```
---
class:

# Exemplos de Operadores Relacionais

Menor de: **<**
```{r}
3 < 5
```

Maior ou igual de: **>=**
```{r}
10 >= 10
```

Maior de: **>=**
```{r}
10 > 10
```

---
class:


# Operadores Lógicos

- E: **&** <br></br>
Será verdadeiro se os dois forem TRUE 

```{r}
x <- 5

 x >= 3 & x <=7
```
```{r}
y <- 2

 y >= 3 & y <= 7
```
---
class:


# Operadores Lógicos

- OU: **|**<br></br>
Será verdadeiro se um dos dois forem TRUE

```{r}
y <- 2

 y >= 3 | y <=7
```

```{r}
y <- 1

 y >= 3 | y == 0
```
---
class:


# Operadores Lógicos

- Negação: **!** <br></br>

```{r}
(!x < 4)
```

---
class:


# NA

Uma característica importante do R que pode dificultar a comparação são os valores ausentes ou **NAs** (não disponíveis). 

**NA** representa um valor desconhecido. 

---
class:


# NA

Quase qualquer operação envolvendo um valor desconhecido também será desconhecido:

```{r}
NA > 10
10 == NA
NA + 10
NA / 2
```

---
class:


# NA

E o mais confuso:

```{r}
NA == NA
```

<br></br>

**is.na()** é a função que testa se um objeto é NA.

---
class:    


# Índices 

- Indicam a posição do elemento no objeto.<br><br>
- Inicia-se a contagem do índice pela posição do primeiro elemento do objeto, ou seja, pelo número 1.<br><br>

*Vetores*: característica linear

```{r}
v <- c(10:25)

v[2]
```

*Data Frames*: o primeiro número indica a linha (observação) e o segundo a coluna (variável).

```{r}
df[145, 2]
```

---
class:    


# Desafio 5

1) No data.frame iris, testar se o Petal.Lenght da 5ª observação é igual ao da 6ª observação. E se o Petal.Lenght da 5ª observação é igual ao da 7ª observação.<br></br>


2) A 10ª observação tem Petal.Width maior ou menor que a seguinte (11ª)? 
E qual é a espécie da menor?

---
class:    


# Desafio 5 - Resposta

1) No data.frame iris, testar se o Petal.Lenght da 5ª observação é igual ao da 6ª observação. E se o Petal.Lenght da 5ª observação é igual ao da 7ª observação.

```{r}
df[5,3] == df[6,3]
df[5,3] == df[7,3]
```

---
class:    


# Desafio 5 - Resposta

2) A 10ª observação tem Petal.Width maior ou menor que a seguinte (11a)? 
E qual é a espécie da menor?

```{r}
df[10,4] < df[11,4] # Petal.Width da 10ª linha é menor que da 11ª

df[10,5]
```

---
class:

# Vamos nos preparar para a tarde?

Para quem está usando o RStudio instalado no computador:

- No seu projeto, crie uma pasta chamada `data`

- Fazer o download deste arquivo: [`titanic`](https://raw.githubusercontent.com/beatrizmilz/2020-R-Ladies-SP-Basico/master/docs/data/titanic.csv) ou em [bit.ly/titanic-rladies](http://bit.ly/titanic-rladies)

- Salve este arquivo na pasta `/data`  <br></br>

- Instale o pacote `tidyverse`:


```{r, include=TRUE, eval = FALSE }
install.packages("tidyverse")
```

- OBS: Caso esteja usando RStudio Cloud, não é necessário realizar estes passos, pois já foram feitos anteriormente.

---
class: middle


<center><img src="img/if_you_want_to_go_fast_go_alone.jpg" style="width: 50%"></center>

---
class:    


# Para aprender mais

- [Repositório RLadies São Paulo](https://github.com/rladies/meetup-presentations_sao-paulo) <br></br>
- [Livro `R` for Data Science](https://r4ds.had.co.nz) <br></br>
- [Software Carpentry](https://software-carpentry.org/lessons/) <br></br>
- [Material do Curso-R](https://www.curso-r.com/material/) <br></br>
- [R-Bloggers](https://www.r-bloggers.com) <br></br>

---
class:    


# Referências

- https://r4ds.had.co.nz

- https://www.curso-r.com/material/

- https://www.tidyverse.org

- https://software-carpentry.org/lessons/

- http://brunaw.com/slides/rladies-sp/13-08-2018/meetup.html#1

- https://github.com/MaryMS/2018-11-R-Course-FatecZS

- https://beatrizmilz.github.io/talk/oficina_intro_r_ufabc_2018/

- https://bookdown.org/wevsena/curso_r_tce/curso_r_tce.html

- https://rstudio-pubs-static.s3.amazonaws.com/279878_c7634fb5fe9e40b7abc7c35aa724a2a0.html


---
class:    


# Referências

- https://analisereal.com/tag/introducao-a-analise-de-dados-com-o-r-2/

- http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html


---
class:   

# Como saber mais?
  - Website RLadies Global: [https://rladies.org/](https://rladies.org/)
  - Twitter: [@RLadiesGlobal](https://twitter.com/rladiesglobal), [@RLadiesSaoPaulo](https://twitter.com/RLadiesSaoPaulo)
  - Instagram: [@RLadiesSaoPaulo](http://instagram.com/RLadiesSaoPaulo)
  - Facebook: [@RLadiesSaoPaulo](http://facebook.com/RLadiesSaoPaulo)
  - MeetUp: [https://www.meetup.com/pt-BR/R-Ladies-Sao-Paulo](https://www.meetup.com/pt-BR/R-Ladies-Sao-Paulo)
  - Github: [https://github.com/rladies/meetup-presentations_sao-paulo](https://github.com/rladies/meetup-presentations_sao-paulo)
  - R-Ladies LATAM Blog (Latin America) - Em breve!
### Não tem capítulo na sua cidade e quer iniciar um?
<center> Saiba como em <a href="https://rladies.org/about-us/help/"> R-Ladies - How do get involved </a> </center>




- Apresentação feita com [Xaringan](https://github.com/yihui/xaringan), com o tema `metropolis` modificado por [Bea Milz](https://beatrizmilz.com) e Haydee Svab.


---
class:   


# Pré-requisitos

## - No seu computador: `R` e `RStudio` instalados

```{r, echo=FALSE, out.width="40%"}
knitr::include_graphics("img/rlogos/rstudio-r.jpg")
```
